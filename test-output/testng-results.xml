<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="5" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="13618" started-at="2020-07-09T19:02:07 IST" finished-at="2020-07-09T19:02:20 IST">
    <groups>
    </groups>
    <test name="SecondClass" duration-ms="50" started-at="2020-07-09T19:02:07 IST" finished-at="2020-07-09T19:02:07 IST">
      <class name="practice.SecondClass">
        <test-method status="PASS" signature="secondClassmethod1()[pri:0, instance:practice.SecondClass@71bbf57e]" name="secondClassmethod1" duration-ms="8" started-at="2020-07-09T19:02:07 IST" finished-at="2020-07-09T19:02:07 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- secondClassmethod1 -->
      </class> <!-- practice.SecondClass -->
    </test> <!-- SecondClass -->
    <test name="Twitter" duration-ms="13618" started-at="2020-07-09T19:02:07 IST" finished-at="2020-07-09T19:02:20 IST">
      <class name="practice.FirstProgram">
        <test-method status="PASS" signature="demomethod(java.lang.String, java.lang.String)[pri:0, instance:practice.FirstProgram@551aa95a]" name="demomethod" duration-ms="8" started-at="2020-07-09T19:02:07 IST" data-provider="dataFetch" finished-at="2020-07-09T19:02:07 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[ekansh]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[raunak]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demomethod -->
        <test-method status="PASS" signature="demomethod(java.lang.String, java.lang.String)[pri:0, instance:practice.FirstProgram@551aa95a]" name="demomethod" duration-ms="1" started-at="2020-07-09T19:02:07 IST" data-provider="dataFetch" finished-at="2020-07-09T19:02:07 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[shyam]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[sundar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demomethod -->
        <test-method status="PASS" signature="demomethod2(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:practice.FirstProgram@551aa95a]" name="demomethod2" duration-ms="13557" started-at="2020-07-09T19:02:07 IST" finished-at="2020-07-09T19:02:20 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://twitter.com/explore]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[//input[@name='session[username_or_email]']]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[//input[@name='session[password]']]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demomethod2 -->
        <test-method status="FAIL" signature="TestToFail()[pri:0, instance:practice.FirstProgram@551aa95a]" name="TestToFail" duration-ms="3" started-at="2020-07-09T19:02:20 IST" depends-on-methods="practice.FirstProgram.demomethod2" finished-at="2020-07-09T19:02:20 IST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:968)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at practice.FirstProgram.TestToFail(FirstProgram.java:43)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:821)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:767)
at org.testng.TestRunner.run(TestRunner.java:588)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:425)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:68)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestToFail -->
      </class> <!-- practice.FirstProgram -->
    </test> <!-- Twitter -->
  </suite> <!-- Suite -->
</testng-results>
